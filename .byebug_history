skip
account.client.authenticate('1234')
account.client
account.client.authenticate(params_account[:password])
skip
account.client.authenticate(params_account[:password])
skip
response.status
response
skip
account.client.date_of_birth
account.client.date_of_birth = account.client.date_of_birth.strftime('%F')
account.client.date_of_birth.strftime('%F')
account.client.date_of_birth.strftime('%FT%T')
account.client.date_of_birth
skip
account.client.id
account.id
skip
json_body
get api_v1_account_path(451), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
valid_login_account[:id]
get api_v1_account_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
json_body
get api_v1_accounts_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
skip
rails routes
json_body
get api_v1_accounts_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
   66:               headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
get api_v1_accounts_path(id: valid_login_account[:id]),
skip
json_body
skip
account
skip
valid_login_account[:token]
valid_login_account[:id]
skip
valid_login_account.id
skip
account
skip
valid_login_account
valid_login_account.token
skip
valid_login_account
valid_login_account.token
skip
@account
skip
account_attributes
skip
@account
skip
context.send('account').errors
context.('account').errors
context.message
context.errors
context.success?
context.sucess?
@account
skip
expect_json_keys(json_body[:results].to_json, %i[id])
expect_json_keys(json_body[:results].to_h, %i[id])
expect_json_keys(json_body[:results].to_hash, %i[id])
expect_json_keys(json_body[:results].to_s, %i[id])
expect_json_keys(json_body[:results], %i[id])
expect_json_keys('results.*.', %i[id])
expect_json_keys('results.*', %i[id])
skip
expect_json_keys('*', %i[total_results results])
skip
expect(json_body[:results]).to have_key(:id)
skip
expect(json_body[:results]).to include(have_key(:lll))
expect(json_body[:results]).to include(have_key(:id))
json_body[:results]
skip
expect_json_keys('results.results.*')
expect_json_keys('results.*')
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance, :client])
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance, :client]
skip
expect_json_keys('results.*')
skip
json_body
skip
empty_accounts.code
empty_accounts.body
empty_accounts.response
empty_accounts
empty_accounts.headers
empty_accounts
empty_accounts = Account.get('/api/v1/accounts')
empty_accounts
empty_accounts[:results]
empty_accounts.results
skip
Account.get('/api/v1/accounts')
skip
Account.get('/api/v1/accounts')
skip
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}")
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path})
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}
empty_accounts
skip
HTTParty.get('http://localhost:3000/api/v1/accounts')
HTTParty.get("https://localhost:3000/api/v1/accounts")
HTTParty.get("http://localhost:3000/api/v1/accounts")
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}")
HTTParty.get("http:\\/\\/localhost:3000\\/#{api_v1_accounts_path}")
skip
HTTParty.get(api_v1_accounts_path)
skip
api_v1_accounts_path
empty_accounts = HTTParty.get(api_v1_accounts_path)
skip
Bank::Model::Account.get(api_v1_accounts_path)
skip
empty_account.class
empty_account.type
empty_account
skip
b
a
skip
a
skip
a
b = a.to_json
a.class
a = JSON.parse(response.body).deep_symbolize_keys
response.body.class
b = a.to_json
a.to_json
a
response.body
response.body = a
response.body
response.body = "a"
response.body
a = JSON.parse(response.body).deep_symbolize_keys
JSON.parse(response.body).deep_symbolize_keys
response.body.deep_symbolize_keys
response.body.results
response.body
json_body.to_json
json_body.results
expect_json_keys('.*', %i[:id :agency :number :status :balance :client])
expect_json_keys('*', %i[:id :agency :number :status :balance :client])
skip
expect_json_keys('results', [:id, :agency, :number, :status, :balance])
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance])
expect_json_keys(json_body.results, [:id, :agency, :number, :status, :balance])
expect_json_keys(json_body[:results], [:id, :agency, :number, :status, :balance])
expect_json_keys('results.*', %i[:id :agency :number :status :balance])
skip
json_body.keys
json_body.results
json_body[:results]
json_body[:results].keys
json_body[:results].keyys
expect_json_keys(json_body[:results], [:id, :agency, :number, :status, :balance])
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance])
expect(json_body[:total_results]).to eq(@accounts.length)
json_body[:total_results]
json_body
expect(json_body[:total_results]).to eq(@accounts.length
expect_json_keys('client', %i[:id :name :last_name :cpf])
skip
response.body
response
expect_json_keys('results.*', %i[:id :agency :number :status :balance])
expect(json_body[:total_results]).to eq(@accounts.length)
skip
response.buf
response.body
response
response.body = JSON.parse(response.body).deep_symbolize_keys
response
expect(response).to have_http_status(200)
expect(json_response).to eq({total_results: 0, results: []})
json_response
response
expect(json).to eq({total_results: 1})
expect(json).to eq({total_results: 0})
{total_results: 0}.class
json.class
json
skip
response.body
expect(response.body).to eq({total_results: 0})
expect(response.body).to eq({total_results: 0}
expect_json(total_results: 0)
response.body = JSON.parse(response.body).deep_symbolize_keys
JSON.parse(response.body).deep_symbolize_keys
response.body
expect_json(total_results: 0)
skip
expect_json(total_results: 0)
skip
expect_json(resultls: 2)
expect_json(resultls: [2])
expect_json(results: [2])
expect_json
skip
expect_json(total_results: 0, results: Array.new)
response.body = JSON.parse(response.body)
JSON.parse(response.body)
expect_json(total_results: 0, results: Array.new)
skip
response.body.to_hash
response.body.class
response.body.type
response.body
expect(response.body).eql?(response.body)
expect(response.body).eql?(2)
expect(response.body).matchs? response.body
expect(response.body).to response.body
expect(response.body).to match_response_schema('errors', strict: true)
expect(response.body).matchs?(total_results: 0, results: [])
expect(response.body).to(total_results: 0, results: [])
expect(response.body).to {total_results: 0, results: []}
expect(response.body).to ({total_results: 0, results: []})
expect(response.body).to {total_results: 0, results: []}
expect_json
expect_json(total_results: 0, results: Array.new)
response.body
skip
expect_json
expect_json(total_results: 0, results: [])
response[:body]
response
skip
create(:new_extract_withdraw, account, date: Faker::Dat
create(:new_extract_withdraw, account, date: Faker::Date)
create(:new_extract_withdraw, account, date: Date.new)
create(:new_extract_withdraw, account, date: Time.new(2022, 02, 02))
skip
expect(extract_withdraw.value.negative?).to eq(true)
extract_withdraw.value.negative?
extract_withdraw
a
a = extract_withdraw.save
extract_withdraw
skip
extract_transfer_sent
skip
a = create(:new_extract_transfer_sent, account: @accounts.first)
@accounts
skip
extract_deposit.save
extract_deposit = build(:new_extract_deposit, depositing_name: 'ca', account: @accounts.first )
skip
