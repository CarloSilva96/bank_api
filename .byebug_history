skip
a.date::date
a.date
a= Bank::Model::Extract.where(account_id: params[:id]).first
Bank::Model::Extract.where(account_id: params[:id])
params[:start_date]::to_date
params[:start_date]
skip
{result: { date: date, account_balance: account_balance }}
result: { date: date, account_balance: account_balance }
account_balance
skip
a.instance_values.compact_blank
a.instance_values
a = (Bank::Model::Account.select('balance').find(params[:id]))
(Bank::Model::Account.select('balance').find(params[:id])).instance_values
Bank::Model::Account.select('balance').find(params[:id]).to_hash
Bank::Model::Account.select('balance').find(params[:id]).to_h
account_balance
skip
balance.balance
balance
skip
Bank::Model::Account.select('balance').find(params[:id])
params[:id]
Bank::Model::Account.select('balance').(params[:id])
skip
1000 > BASE_ADDITIONAL
context.transfer.value > BASE_ADDITIONAL
skip
extract_transfer_received
skip
balance_update
skip
context.transfer.value + context.transfer.fee_transfer
balance_update
skip
context.transfer.to_negative
context.transfer
context.transfer.fee_transfer
skip
context.transfer
skip
context.transfer
context.transfer.to_negative
skip
day_transfer.hour
day_transfer.on_weekend? 
(day_transfer.on_weekend? || day_transfer.hour < 9 || day_transfer.hour > 18)
day_transfer.on_weekend? || day_transfer.hour < 9 || day_transfer.hour > 18
skip
context.transfer.value > BASE_ADDITIONAL
skip
context.transfer
skip
Bank::Model::Account.find(params[:id])
skip
Bank::Model::Account.find(params[:id])
skip
Bank::Model::Account.find(params[:id])
params[:id]
skip
context
skip
extract_deposit
skip
extract_deposit
skip
extract_deposit
skip
extract_deposit
skip
a.valid?
a.errro
a = context.account_received.save
context.account_received.save.errors
context.account_received.save
extract_deposit
context.account_received.extracts << extract_deposit
skip
extract_deposit
skip
self.operation_type.eql?('deposit')
(self.operation_type.eql?('with_draw') || self.operation_type.eql?('transfer_sent')) && self.value > 0
(self.operation_type.eql?('deposit') || self.operation_type.eql?('transfer_received')) && self.value <= 0
skip
exit
skip
self.value > 0
(self.operation_type.eql?('deposit') || self.operation_type.eql?('transfer_received')) && self.value <= 0
skip
exit
(self.operation_type.eql?('deposit') || self.operation_type.eql?('transfer_received')) && self.value <= 0
self.operation_type.eql?('deposit') || self.operation_type.eql?('transfer_received')) && self.value <= 0
skip
a = context.account_received.save
context.account_received.extracts
context.account_received
skip
extract_deposit
skip
extract_deposit
skip
a
a = Bank::Model::Account.by_agency_and_number(context.agency, context.account_number).by_status(Bank::Model::Account.statuses[:active]).first
Bank::Model::Account.by_agency_and_number(context.agency, context.account_number).by_status(Bank::Model::Account.statuses[:active]).first
   10:                           .first
    9:                           .by_status(Bank::Model::Account.statuses[:active])
    8:                           .by_agency_and_number(context.agency, context.account_number)
Bank::Model::Account
skip
context.account_number
context.agency
skip
context.message.present?
skip
context.failure?
context.error
context.deposit.errors
context.deposit
context.errors
context
context.message
skip
context.methods
context.get
context.send
context
context.send(:deposit)&.errors.present?
context.send(object_name)&.errors.present?
object_name
skip
context.message
context.message.present?
skip
context.deposit.valid?
context.deposit
context
skip
@voucher
skip
@voucher
skip
Bank::Model::Extract.create(context.deposit.instance_values.compact_blank)
Bank::Model::Extract.create
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
skip
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
skip
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
context.deposit
skip
Bank::Model::Extract.new(a)
a = context.deposit.instance_values.compact_blank
Bank::Model::Extract.new(a)
a = context.deposit.instance_values.compact
a = context.deposit.instance_values
a.instance_values
a
Bank::Model::Extract.new(a)
Bank::Model::Extract(a)
a = context.deposit.instance_values
context.deposit.instance_values
extract = Bank::Model::Extract.new(context.deposit.instance_values)
context.deposit.value
context.deposit.balance
context.account.balance
skip
context.account
skip
context.account
skip
context.message
context.message.present?
object_name
exit
context
context.send(object_name)
context.deposit.errors.messages
context.deposit.errors.message
context.deposit.
context.deposit.valid?
context.deposit
context
skip
context.deposit.valid?
context.deposit
context.deposit = Bank::Model::Deposit.new(context.deposit_params)
Bank::Model::Deposit.new(context.deposit_params)
context.deposit_params
skip
exit
Bank::Model::Account.statuses[:closed]
Bank::Model::Account.statuses
Bank::Model::Account.status
Bank::Model::Account.statuses.closed
Bank::Model::Account.status.closed
Bank::Model::Account.statuses
Bank::Model::Account.status_closed
skip
context.account_params[:client]
context.account_params
context.account_params.client
context.account.client
exit
params
context.account
context.account.assign_attributes(context.account_params)
context.account_params
context.account
skip
exit
json.call(@account, :id, :agency, :number, :balance, :created_at, :updated_at)
json.call(@account.client, [:id, :name, :last_name, :cpf, :email, :date_of_birth])
@account.client
@account
skip
account
exit
Bank::Model::Account.by_agency_and_number(self.agency, number).first.nil?
Bank::Model::Account.by_agency_and_number(self.agency, number).first
Bank::Model::Account.by_agency_and_number(self.agency, number)
account
exit
Bank::Model::Account.by_agency_and_number(self.agency, number)
number
