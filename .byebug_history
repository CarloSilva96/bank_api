skip
@account_source.extracts.size
@account_source.size
@account_source.length
@account_source.extracts
skip
@account_source.extracts
skip
@account_source
a = create(:new_extract_withdraw)
create(:new_extract_withdraw).errors
create(:new_extract_withdraw).errors?
create(:new_extract_withdraw).valid?
@account_source.extracts << create(:new_extract_withdraw)
@account_source.extracts
@account_source.extracts << create(:new_extract_deposit)
@account_source.extracts.size
@account_source.extracts
@account_source.balance
@account_source
skip
@account_source.extracts
skip
@account_source.extracts.length
@account_source.extracts.legth
@account_source.extracts
skip
@account_source.extracts.length
@account_source.extracts.legth
@account_source.extracts
skip
date
skip
I18n.t(date)
I18n.l(date)
I18n
t(date)
date
skip
t
date
skip
Time.now.strftime('%Y/%m/%d %H:%M:%S')
Time.now.strftime('%Y/%m/%d %H:%M:%S)
Time.now.strftime('%Y/%m/%d %H:%M:%S %z')
Time.now
strftime('%Y/%m/%d %H:%M:%S %z')
date.strftime('%Y-%m-%d %H:%M:%S')
expect(date).to eq(extract.date)
date.to_date
date.class
extract.date
date
skip
extract.value
value
skip
context.extract_transfer_sent.additional
context.extract_transfer_sent.value + context.extract_transfer_sent.fee_transfer
skip
create_extract_transf_received
skip
acc_sent_different_received?
is_available_balance?
skip
create_extract_transfer_sent
exit
a[:name].try
a = {name: 2}
a.try
try(a)
a =2
:eu = 2
try(1)
context.extract_transfer_sent.additional&
context.extract_transfer_sent.additional.value
context.extract_transfer_sent.additional
context.extract_transfer_sent.fee_transfer
context.extract_transfer_sent.value
context.source_account.balance
is_available_balance?
skip
create_extract_transfer_sent
skip
create_extract_transfer_sent
skip
extract_deposit.valid?
extract_deposit
skip
deposit_extract
create_extract_deposit
skip
deposit_params
skip
extract_deposit.valid?
extract_deposit
extract_deposit.account
skip
e
skip
account
skip
a.extracts
a = Bank::Model::Account.find(1778)
account
skip
account
skip
context.account.errors
skip
extract_withdraw.errors
extract_withdraw.save
context.account.save
skip
context.account.balance - extract_withdraw.value < 0
context.account.status.eql?('closed')
skip
extract_deposit.invalid?
extract_deposit
skip
response.body.read
request.body.read
a = JSON.parse(json_body.to_s)
json_body.to_s
json_body.class
a = JSON.parse(json_body)
json_body[:date].class
json_body.to_h
json_body.instance_values
json_body[:value]
expect_json
expected
expect_json('value')
expect_json(:value)
skip
response.body.operation_type
response.body
response
json_body[:value].class
json_body[:value]
json_body
skip
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
skip
extract_withdraw.invalid?
extract_withdraw.errors
context.account.extracts << extract_withdraw
skip
extract_withdraw.valid?
extract_withdraw.value = 1
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
context.account.extracts
a = context.account.extracts << extract_withdraw
extract_withdraw.errors
extract_withdraw.value = 0
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
skip
context.account
context.account.balance - context.withdraw < 0
skip
context.withdraw[:withdraw]
context.withdraw
context.withdraw.nil?
skip
extract_withdraw
context.account.extracts << extract_withdraw
extract_withdraw
skip
extract_withdraw
skip
deposit_extract
skip
context.account_received.balance += BigDecimal(deposit_extract.value)
skip
context.account_received.balance
deposit_extract.value
skip
context.account_received.balance
skip
deposit_extract
skip
attributes
skip
context.deposit_params
skip
Bank::Model::Extract.new(to_extract_deposit)
skip
Bank::Model::Extract.new(to_extract_deposit)
skip
deposit_extract = Bank::Model::Extract.new(context.deposit_params)
deposit_extract = Bank::Model::Extract.new(to_extract_deposit)
skip
to_extract_deposit.instance_values
to_extract_deposit
skip
context.deposit_params
skip
context.deposit_params
skip
Bank::Model::Extract.new(to_extract_deposit)
to_extract_deposit
skip
deposit_extract.valid?
skip
deposit_extract.errors
deposit_extract.valid?
deposit_extract
context.account_received.errors
context.account_received.valid?
context.account_received
skip
context.message
skip
context.send('voucher')&.errors
ontext.send('voucher')&.errors
context.message
ontext.send('voucher')&.errors&
skip
context.account_received.balance + deposit_extract.value
deposit_extract.value
context.account_received.balance
skip
deposit_extract.valid?
deposit_extract
skip
context.deposit_extract.errors.messages
context.deposit_extract.invalid?
skip
context.deposit_extract
skip
context.deposit_extract = Bank::Model::Extract.new(context.deposit_params)
context.deposit_params
skip
context.deposit_extract.invalid?
context.deposit_extract
skip
Bank::Model::Account.count
a
skip
account_attributes
skip
Bank::Model::Account.new(context.account_params)
skip
account_params
skip
account_params
skip
skio
context.account
skip
