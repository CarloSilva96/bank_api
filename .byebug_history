skip
account
skip
a.extracts
a = Bank::Model::Account.find(1778)
account
skip
account
skip
context.account.errors
skip
extract_withdraw.errors
extract_withdraw.save
context.account.save
skip
context.account.balance - extract_withdraw.value < 0
context.account.status.eql?('closed')
skip
extract_deposit.invalid?
extract_deposit
skip
response.body.read
request.body.read
a = JSON.parse(json_body.to_s)
json_body.to_s
json_body.class
a = JSON.parse(json_body)
json_body[:date].class
json_body.to_h
json_body.instance_values
json_body[:value]
expect_json
expected
expect_json('value')
expect_json(:value)
skip
response.body.operation_type
response.body
response
json_body[:value].class
json_body[:value]
json_body
skip
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
skip
extract_withdraw.invalid?
extract_withdraw.errors
context.account.extracts << extract_withdraw
skip
extract_withdraw.valid?
extract_withdraw.value = 1
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
context.account.extracts
a = context.account.extracts << extract_withdraw
extract_withdraw.errors
extract_withdraw.value = 0
extract_withdraw.errors
extract_withdraw.valid?
extract_withdraw
skip
context.account
context.account.balance - context.withdraw < 0
skip
context.withdraw[:withdraw]
context.withdraw
context.withdraw.nil?
skip
extract_withdraw
context.account.extracts << extract_withdraw
extract_withdraw
skip
extract_withdraw
skip
deposit_extract
skip
context.account_received.balance += BigDecimal(deposit_extract.value)
skip
context.account_received.balance
deposit_extract.value
skip
context.account_received.balance
skip
deposit_extract
skip
attributes
skip
context.deposit_params
skip
Bank::Model::Extract.new(to_extract_deposit)
skip
Bank::Model::Extract.new(to_extract_deposit)
skip
deposit_extract = Bank::Model::Extract.new(context.deposit_params)
deposit_extract = Bank::Model::Extract.new(to_extract_deposit)
skip
to_extract_deposit.instance_values
to_extract_deposit
skip
context.deposit_params
skip
context.deposit_params
skip
Bank::Model::Extract.new(to_extract_deposit)
to_extract_deposit
skip
deposit_extract.valid?
skip
deposit_extract.errors
deposit_extract.valid?
deposit_extract
context.account_received.errors
context.account_received.valid?
context.account_received
skip
context.message
skip
context.send('voucher')&.errors
ontext.send('voucher')&.errors
context.message
ontext.send('voucher')&.errors&
skip
context.account_received.balance + deposit_extract.value
deposit_extract.value
context.account_received.balance
skip
deposit_extract.valid?
deposit_extract
skip
context.deposit_extract.errors.messages
context.deposit_extract.invalid?
skip
context.deposit_extract
skip
context.deposit_extract = Bank::Model::Extract.new(context.deposit_params)
context.deposit_params
skip
context.deposit_extract.invalid?
context.deposit_extract
skip
Bank::Model::Account.count
a
skip
account_attributes
skip
Bank::Model::Account.new(context.account_params)
skip
account_params
skip
account_params
skip
skio
context.account
skip
account_params
skip
account_params
skip
params[:client_attributes]
params
skip
params
skip
params
skip
Bank::Model::Account.new(context.account_params)
skip
account_attributes[:client_attributes] = FactoryBot.attributes_for(:new_client)
skip
context.account
skip
client
context.account
skip
account_attributes
account_attributes[:client_attributes] = FactoryBot.attributes_for(:new_client)
skip
context.message
expect([response.status]).to include(400, 422)
skip
expect(response.status).to include(400, 22)
response.status
skip
Bank::Model::Deposit.new(context.deposit_params)
context.deposit_params
skip
extract_deposit.value
extract_deposit
skip
Bank::Model::Deposit.new(context.deposit_params)
skip
@deposit_params.instance_values
skip
context.message
skip
FactoryBot.attributes_for(:new_extract_deposit)
skip
context.deposit.value
skip
@deposit_params.instance_values
skip
context.message
skip
@deposit_params.to_json
skip
@deposit_params
skip
context.deposit.value.class
context.deposit.value
skip
context.deposit.value
context.account_received.balance.class
context.account_received.balance
skip
@deposit_params
skip
CPF.valid?(nil)
CPF.valid?('05897687155')
CPF.valid?('058976871')
CPF.valid?('05897687196')
CPF.valid?(self.depositing_cpf)
skip
CPF.valid?('05897687196')
CPF.valid?(05897687196)
self.depositing_cpf.nil?
CPF.valid?(self.depositing_cpf)
skip
self.depositing_cpf
skip
context.send('account')&.errors
context.message
skip
context.message
skip
@deposit_params
@deposit_params[:cpf]
skip
@account
context.message
context.message.present?
skip
account.client.authenticate('1234')
account.client
account.client.authenticate(params_account[:password])
skip
account.client.authenticate(params_account[:password])
skip
response.status
response
skip
account.client.date_of_birth
account.client.date_of_birth = account.client.date_of_birth.strftime('%F')
account.client.date_of_birth.strftime('%F')
