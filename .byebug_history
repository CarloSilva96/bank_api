skip
context.message.present?
skip
context.failure?
context.error
context.deposit.errors
context.deposit
context.errors
context
context.message
skip
context.methods
context.get
context.send
context
context.send(:deposit)&.errors.present?
context.send(object_name)&.errors.present?
object_name
skip
context.message
context.message.present?
skip
context.deposit.valid?
context.deposit
context
skip
@voucher
skip
@voucher
skip
Bank::Model::Extract.create(context.deposit.instance_values.compact_blank)
Bank::Model::Extract.create
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
skip
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
skip
Bank::Model::Extract.new(context.deposit.instance_values.compact_blank)
context.deposit
skip
Bank::Model::Extract.new(a)
a = context.deposit.instance_values.compact_blank
Bank::Model::Extract.new(a)
a = context.deposit.instance_values.compact
a = context.deposit.instance_values
a.instance_values
a
Bank::Model::Extract.new(a)
Bank::Model::Extract(a)
a = context.deposit.instance_values
context.deposit.instance_values
extract = Bank::Model::Extract.new(context.deposit.instance_values)
context.deposit.value
context.deposit.balance
context.account.balance
skip
context.account
skip
context.account
skip
context.message
context.message.present?
object_name
exit
context
context.send(object_name)
context.deposit.errors.messages
context.deposit.errors.message
context.deposit.
context.deposit.valid?
context.deposit
context
skip
context.deposit.valid?
context.deposit
context.deposit = Bank::Model::Deposit.new(context.deposit_params)
Bank::Model::Deposit.new(context.deposit_params)
context.deposit_params
skip
exit
Bank::Model::Account.statuses[:closed]
Bank::Model::Account.statuses
Bank::Model::Account.status
Bank::Model::Account.statuses.closed
Bank::Model::Account.status.closed
Bank::Model::Account.statuses
Bank::Model::Account.status_closed
skip
context.account_params[:client]
context.account_params
context.account_params.client
context.account.client
exit
params
context.account
context.account.assign_attributes(context.account_params)
context.account_params
context.account
skip
exit
json.call(@account, :id, :agency, :number, :balance, :created_at, :updated_at)
json.call(@account.client, [:id, :name, :last_name, :cpf, :email, :date_of_birth])
@account.client
@account
skip
account
exit
Bank::Model::Account.by_agency_and_number(self.agency, number).first.nil?
Bank::Model::Account.by_agency_and_number(self.agency, number).first
Bank::Model::Account.by_agency_and_number(self.agency, number)
account
exit
Bank::Model::Account.by_agency_and_number(self.agency, number)
number
