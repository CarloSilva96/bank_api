skip
Bank::Model::Account.count
a
skip
account_attributes
skip
Bank::Model::Account.new(context.account_params)
skip
account_params
skip
account_params
skip
skio
context.account
skip
account_params
skip
account_params
skip
params[:client_attributes]
params
skip
params
skip
params
skip
Bank::Model::Account.new(context.account_params)
skip
account_attributes[:client_attributes] = FactoryBot.attributes_for(:new_client)
skip
context.account
skip
client
context.account
skip
account_attributes
account_attributes[:client_attributes] = FactoryBot.attributes_for(:new_client)
skip
context.message
expect([response.status]).to include(400, 422)
skip
expect(response.status).to include(400, 22)
response.status
skip
Bank::Model::Deposit.new(context.deposit_params)
context.deposit_params
skip
extract_deposit.value
extract_deposit
skip
Bank::Model::Deposit.new(context.deposit_params)
skip
@deposit_params.instance_values
skip
context.message
skip
FactoryBot.attributes_for(:new_extract_deposit)
skip
context.deposit.value
skip
@deposit_params.instance_values
skip
context.message
skip
@deposit_params.to_json
skip
@deposit_params
skip
context.deposit.value.class
context.deposit.value
skip
context.deposit.value
context.account_received.balance.class
context.account_received.balance
skip
@deposit_params
skip
CPF.valid?(nil)
CPF.valid?('05897687155')
CPF.valid?('058976871')
CPF.valid?('05897687196')
CPF.valid?(self.depositing_cpf)
skip
CPF.valid?('05897687196')
CPF.valid?(05897687196)
self.depositing_cpf.nil?
CPF.valid?(self.depositing_cpf)
skip
self.depositing_cpf
skip
context.send('account')&.errors
context.message
skip
context.message
skip
@deposit_params
@deposit_params[:cpf]
skip
@account
context.message
context.message.present?
skip
account.client.authenticate('1234')
account.client
account.client.authenticate(params_account[:password])
skip
account.client.authenticate(params_account[:password])
skip
response.status
response
skip
account.client.date_of_birth
account.client.date_of_birth = account.client.date_of_birth.strftime('%F')
account.client.date_of_birth.strftime('%F')
account.client.date_of_birth.strftime('%FT%T')
account.client.date_of_birth
skip
account.client.id
account.id
skip
json_body
get api_v1_account_path(451), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
valid_login_account[:id]
get api_v1_account_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
json_body
get api_v1_accounts_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
skip
rails routes
json_body
get api_v1_accounts_path(1), headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
   66:               headers: { 'Authorization': "Bearer #{valid_login_account[:token]}" }
get api_v1_accounts_path(id: valid_login_account[:id]),
skip
json_body
skip
account
skip
valid_login_account[:token]
valid_login_account[:id]
skip
valid_login_account.id
skip
account
skip
valid_login_account
valid_login_account.token
skip
valid_login_account
valid_login_account.token
skip
@account
skip
account_attributes
skip
@account
skip
context.send('account').errors
context.('account').errors
context.message
context.errors
context.success?
context.sucess?
@account
skip
expect_json_keys(json_body[:results].to_json, %i[id])
expect_json_keys(json_body[:results].to_h, %i[id])
expect_json_keys(json_body[:results].to_hash, %i[id])
expect_json_keys(json_body[:results].to_s, %i[id])
expect_json_keys(json_body[:results], %i[id])
expect_json_keys('results.*.', %i[id])
expect_json_keys('results.*', %i[id])
skip
expect_json_keys('*', %i[total_results results])
skip
expect(json_body[:results]).to have_key(:id)
skip
expect(json_body[:results]).to include(have_key(:lll))
expect(json_body[:results]).to include(have_key(:id))
json_body[:results]
skip
expect_json_keys('results.results.*')
expect_json_keys('results.*')
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance, :client])
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance, :client]
skip
expect_json_keys('results.*')
skip
json_body
skip
empty_accounts.code
empty_accounts.body
empty_accounts.response
empty_accounts
empty_accounts.headers
empty_accounts
empty_accounts = Account.get('/api/v1/accounts')
empty_accounts
empty_accounts[:results]
empty_accounts.results
skip
Account.get('/api/v1/accounts')
skip
Account.get('/api/v1/accounts')
skip
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}")
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path})
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}
empty_accounts
skip
HTTParty.get('http://localhost:3000/api/v1/accounts')
HTTParty.get("https://localhost:3000/api/v1/accounts")
HTTParty.get("http://localhost:3000/api/v1/accounts")
HTTParty.get("http://localhost:3000/#{api_v1_accounts_path}")
HTTParty.get("http:\\/\\/localhost:3000\\/#{api_v1_accounts_path}")
skip
HTTParty.get(api_v1_accounts_path)
skip
api_v1_accounts_path
empty_accounts = HTTParty.get(api_v1_accounts_path)
skip
Bank::Model::Account.get(api_v1_accounts_path)
skip
empty_account.class
empty_account.type
empty_account
skip
b
a
skip
a
skip
a
b = a.to_json
a.class
a = JSON.parse(response.body).deep_symbolize_keys
response.body.class
b = a.to_json
a.to_json
a
response.body
response.body = a
response.body
response.body = "a"
response.body
a = JSON.parse(response.body).deep_symbolize_keys
JSON.parse(response.body).deep_symbolize_keys
response.body.deep_symbolize_keys
response.body.results
response.body
json_body.to_json
json_body.results
expect_json_keys('.*', %i[:id :agency :number :status :balance :client])
expect_json_keys('*', %i[:id :agency :number :status :balance :client])
skip
expect_json_keys('results', [:id, :agency, :number, :status, :balance])
expect_json_keys('results.*', [:id, :agency, :number, :status, :balance])
